enum UnlockType {
    DAILY # Unlock type for daily vesting
    MONTHLY # Unlock type for monthly vesting
}

enum StakingType {
    FIX # Staking type for fixed months where band is locked and shares don't change
    FLEXI # Staking type for flexible months where band is unlocked and shares increase
}

############################################################
#                          Vesting
############################################################

# Entity representing Vesting Contract
type VestingContract @entity {
    """
    Unique identifier for the vesting contract.
    Always equal to 0.
    Value is static.
    Type: ID
    Example: "0"
    """
    id: ID!

    """
    Hexadecimal address of the vesting contract.
    Type: Bytes
    Example: "0xabc123"
    """
    vestingContractAddress: Bytes!

    """
    Hexadecimal address of the associated staking contract.
    Type: Bytes
    Example: "0xdef456"
    """
    stakingContractAddress: Bytes!

    """
    Hexadecimal address of the token used for vesting contract.
    Type: Bytes
    Example: "0xghi789"
    """
    tokenContractAddress: Bytes!

    """
    Date when the vesting contract was listed.
    Type: BigInt
    Example: 1642402345000
    """
    listingDate: BigInt!

    """
    Total added pool amount
    Type: Int
    Example: 1642402345000
    """
    totalAmountOfPools: Int!
}

# Entity representing Vesting Pool
type VestingPool @entity {
    """
    Unique identifier for the vesting pool.
    Type: ID
    Example: "456"
    """
    id: ID!

    """
    Numeric identifier for the pool.
    Type: BigInt
    Example: 789
    """
    poolId: BigInt!

    """
    Associated Vesting Contract for the pool.
    """
    vestingContract: VestingContract!

    """
    Name of the vesting pool.
    Type: String
    Example: "Main Pool"
    """
    name: String!

    """
    Listing percentage dividend for the pool.
    Type: BigInt
    Example: 100
    """
    listingPercentageDividend: BigInt!

    """
    Listing percentage divisor for the pool.
    Type: BigInt
    Example: 1000
    """
    listingPercentageDivisor: BigInt!

    """
    Duration of the cliff period.
    Type: BigInt
    Example: 2592000000 (30 days in milliseconds)
    """
    cliffDuration: BigInt!

    """
    End date of the cliff period.
    Type: BigInt
    Example: 1645000000000
    """
    cliffEndDate: BigInt!

    """
    Cliff percentage dividend for the pool.
    Type: BigInt
    Example: 200
    """
    cliffPercentageDividend: BigInt!

    """
    Cliff percentage divisor for the pool.
    Type: BigInt
    Example: 1000
    """
    cliffPercentageDivisor: BigInt!

    """
    Duration of the vesting period.
    Type: BigInt
    Example: 7776000000 (90 days in milliseconds)
    """
    vestingDuration: BigInt!

    """
    End date of the vesting period.
    Type: BigInt
    Example: 1648000000000
    """
    vestingEndDate: BigInt!

    """
    Type of unlocking mechanism (DAILY or MONTHLY).
    Type: UnlockType
    Example: DAILY
    """
    unlockType: UnlockType!

    """
    Amount of dedicated tokens for the pool.
    Type: BigInt
    Example: 1000
    """
    dedicatedPoolTokens: BigInt!

    """
    Total amount of tokens in the pool.
    Type: BigInt
    Example: 100000
    """
    totalPoolTokenAmount: BigInt!

    """
    List of beneficiaries associated with the pool.
    """
    beneficiaries: [Beneficiary!] @derivedFrom(field: "vestingPool")

    """
    List of band Ids staked from associated pool.
    """
    bands: [Band!]! @derivedFrom(field: "vestingPool")
}

# Entity representing Beneficiary
type Beneficiary @entity {
    """
    Hexadecimal address of the beneficiary.
    Type: Bytes
        Example: "0x123abc"
    """
    id: ID!

    """
    Associated Vesting Pool for the beneficiary.
    """
    vestingPool: VestingPool!

    """
    Total tokens allocated to the beneficiary.
    Type: BigInt
    Example: 5000
    """
    totalTokens: BigInt!

    """
    Tokens vested to the beneficiary.
    Type: BigInt
    Example: 2500
    """
    vestedTokens: BigInt!

    """
    Tokens vested during the cliff period.
    Type: BigInt
    Example: 1000
    """
    cliffTokens: BigInt!

    """
    Tokens vested during the listing period.
    Type: BigInt
    Example: 500
    """
    listingTokens: BigInt!

    """
    Tokens staked by the beneficiary.
    Type: BigInt
    Example: 1000
    """
    stakedTokens: BigInt!

    """
    Tokens claimed by the beneficiary.
    Type: BigInt
    Example: 2000
    """
    claimedTokens: BigInt!
}

############################################################
#                       NFT & NFT Sale
############################################################

type NftContract @entity {
    id: ID!
    nftContractAddress: Bytes!
}

# NFT details
type Nft @entity {
    id: ID!
    idInLevel: BigInt!
    level: BigInt!
    isGenesis: Boolean!
    activityEndTimestamp: BigInt!
    extendedActivityEndTimestamp: BigInt!
    owner: User!
}

# NFT holder info
type User @entity {
    id: ID!
    nfts: [Nft!]! @derivedFrom(field: "owner")
}

############################################################
#                         Staking
############################################################

type StakingContract @entity {
    """
    Always equal to 0
    """
    id: ID!

    # Contract fields
    """
    Staking contract address
    """
    stakingContractAddress: Bytes!

    """
    USDT token address used for rewards
    """
    usdtToken: Bytes!

    """
    USDC token address used for rewards
    """
    usdcToken: Bytes!

    """
    WOW token address used for buying bands (staking)
    """
    wowToken: Bytes!

    """
    Array of 24 elements representing the amount of shares staker in total will own
    """
    sharesInMonths: [BigInt!]! # Total shares amount in specific month
    """
    Array of 24 elements representing the amount of shares staker will get after month
    """
    sharesChangeInMonths: [BigInt!]! # Additional shares amount which is added after each month
    """
    Next band id which will be used for the next band entity
    """
    nextBandId: BigInt!

    """
    Next distribution id which will be used for the next distribution entity
    """
    nextDistributionId: BigInt!

    """
    Percentage precision for the distribution percentages
    """
    percentagePrecision: Int!

    """
    Share precision used to format shares in FE
    """
    sharePrecision: Int!

    """
    Number of total pools
    """
    totalPools: Int!

    """
    Number of total band levels
    """
    totalBandLevels: Int!

    """
    Flag which determines if upgrades and downgrades are allowed
    """
    areUpgradesEnabled: Boolean!

    """
    Flag which determines if currently gelato is distributing rewards
    """
    isDistributionInProgress: Boolean!

    """
    Stakers who are currently staking
    """
    stakers: [Staker!]!

    # Additional fields
    """
    Total amount of WOW staked in contract
    """
    totalStakedAmount: BigInt!

    """
    The last time when shares were synced by gelato or event
    """
    lastSharesSyncDate: BigInt!
}

type Pool @entity {
    """
    Pool ID from 1 to 9
    """
    id: ID!

    # Contract fields
    """
    Percentage of distribution for this pool (all pools must sum to 100%)
    """
    distributionPercentage: Int!

    # Additional fields
    """
    Total fixed shares in pool from this pool and higher pools
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return total fixed shares from band level 2 and 3
    """
    totalFixedSharesAmount: BigInt! # Total fixed shares in pool from this pool and higher pools
    """
    Total flexi shares in pool from this pool and higher pools
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return total flexi shares from band level 2 and 3
    """
    totalFlexiSharesAmount: BigInt!

    """
    Isolated fixed shares from bands only from this pool (shares from higher pools are not included)
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return isolated fixed shares from band level 2
    """
    isolatedFixedSharesAmount: BigInt!

    """
    Isolated flexi shares from bands only from this pool (shares from higher pools are not included)
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return isolated flexi shares from band level 2
    """
    isolatedFlexiSharesAmount: BigInt!
}

type BandLevel @entity {
    """
    Band level from 1 to 9
    """
    id: ID!

    # Contract fields
    """
    Band level price in USD (USDT or USDC)
    """
    price: BigInt!

    """
    Pools that are accessible for this band level
    """
    accessiblePools: [Pool!]!
}

type Staker @entity {
    """
    Staker address
    """
    id: ID!

    # Contract fields
    """
    Fixed bands are bands that are locked for a specific amount of months
    This array is holding all fixed bands that staker has
    """
    fixedBands: [Band!]!

    """
    Flexi bands are bands that are not locked and can be unstaked at any time
    This array is holding all flexi bands that staker has
    """
    flexiBands: [Band!]!

    """
    Total amount of bands purchased by staker (fixed + flexi bands)
    """
    bandsCount: Int!

    """
    Staker rewards for USDT and USDC tokens
    """
    rewards: [StakerRewards!]! @derivedFrom(field: "staker")

    # Additional fields
    """
    Total amount of WOW staked (fixed + flexi bands)
    Amount added from active band prices
    """
    stakedAmount: BigInt! # Amount of WOW staked
    """
    Fixed shares per pool from all band levels (stakes)
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [6000000, 4000000, 4000000, 4000000, 2000000, 2000000, 2000000, 0, 0]
    """
    fixedSharesPerPool: [BigInt!]!

    """
    Flexi shares per pool from all band levels (stakes)
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [3000000, 2000000, 2000000, 2000000, 1000000, 1000000, 1000000, 0, 0]
    """
    flexiSharesPerPool: [BigInt!]!

    """
    Isolated fixed shares per pool from bands only from this band level (stake)
    Shares from other stakers or other band levels are not included
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [2000000, 0, 0, 2000000, 0, 0, 2000000, 0, 0]
    """
    isolatedFixedSharesPerPool: [BigInt!]!

    """
    Isolated flexi shares per pool from bands only from this band level (stake)
    Shares from other stakers or other band levels are not included
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [1000000, 0, 0, 1000000, 0, 0, 1000000, 0, 0]
    """
    isolatedFlexiSharesPerPool: [BigInt!]!

    """
    Total unclaimed rewards for USDT and USDC tokens combined (USD)
    """
    totalUnclaimedRewards: BigInt!

    """
    Total claimed rewards for USDT and USDC tokens combined (USD)
    """
    totalClaimedRewards: BigInt!
}

type StakerRewards @entity {
    """
    ID composed of: staker-token
    """
    id: ID!

    # Contract fields
    """
    Staker address who owns the rewards
    """
    staker: Staker!

    """
    Token address
    """
    token: Bytes!

    # Additional fields
    """
    Amount of unclaimed rewards that staker has
    It will become 0 after claiming and will be added to claimedAmount
    """
    unclaimedAmount: BigInt!

    """
    Amount of claimed rewards
    """
    claimedAmount: BigInt!
}

type Band @entity {
    """
    ID incremented by 1 for each new band (like NFT ID)
    """
    id: ID!

    # Contract fields
    """
    Staker address who owns the band
    """
    owner: Staker!

    """
    Date when the band was purchased
    """
    stakingStartDate: BigInt!

    """
    Band level from 1 to 9
    """
    bandLevel: BandLevel!

    """
    If user has staked with type FLEXI, this field will be set to 0
    If user has staked with type FIX, this field will be set to
    the number of months the band is fixed (locked) for.
    It can be a number from 1 to 24.
    """
    fixedMonths: Int!

    """
    Staking type for the band (FIX or FLEXI)
    """
    stakingType: StakingType!

    """
    Determines if the band is purchased by staking vested WOW tokens from Vesting contract or not
    """
    areTokensVested: Boolean!

    """
    If band is purchased by staking vested WOW tokens from Vesting contract
    this field will be set to pool id in Vesting contract.
    If band is purchased by staking WOW tokens from Staking contract
    this field will not be set and will be null.
    """
    vestingPool: VestingPool

    # Additional fields
    """
    This is the amount of shares band owns in each accessible pool
    For non accessible pools, the band has 0 shares
    """
    sharesAmount: BigInt!
}

type FundsDistribution @entity {
    """
    ID incremented by 1 for each distribution
    """
    id: ID!

    # Contract fields
    """
    Token address
    """
    token: Bytes!

    """
    Amount of tokens to distribute to all stakers
    """
    amount: BigInt!

    """
    Date when the distribution was created by admin
    Returned in unix timestamp
    """
    createdAt: BigInt!

    """
    Date when the distribution was executed by gelato
    Returned in unix timestamp
    """
    distributedAt: BigInt!

    """
    List of stakers who received the distribution
    This array is in string format because this array is going to be used
    as parameter for the SC function call
    """
    stakers: [String!]!

    """
    List of amounts each staker received
    This array needs to be the same length as the stakers array
    and the amounts need to be in the same order as the stakers
    """
    rewards: [BigInt!]!
}
