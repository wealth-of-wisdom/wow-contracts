enum UnlockType {
    DAILY # Unlock type for daily vesting
    MONTHLY # Unlock type for monthly vesting
}

enum StakingType {
    FIX # Staking type for fixed months where band is locked and shares don't change
    FLEXI # Staking type for flexible months where band is unlocked and shares increase
}

enum ActivityStatus {
    NOT_ACTIVATED # NFT is inactive
    ACTIVATED # NFT is active
    DEACTIVATED # NFT is expired
}

############################################################
#                          Vesting
############################################################

# Entity representing Vesting Contract
type VestingContract @entity {
    """
    Unique identifier for the vesting contract.
    Always equal to 0.
    Value is static.
    Type: ID
    Example: "0"
    """
    id: ID!

    """
    Hexadecimal address of the vesting contract.
    Example: "0xabc123"
    """
    vestingContractAddress: Bytes!

    """
    Hexadecimal address of the associated staking contract.
    Example: "0xdef456"
    """
    stakingContractAddress: Bytes!

    """
    Hexadecimal address of the token used for vesting contract.
    Example: "0xghi789"
    """
    tokenContractAddress: Bytes!

    """
    Unix timestamp when the vesting contract was listed.
    Example: 1642402345
    """
    listingDate: BigInt!

    """
    Total added pool amount
    Example: 20
    """
    totalAmountOfPools: Int!
}

# Entity representing Vesting Pool
type VestingPool @entity {
    """
    Unique identifier for the vesting pool.
    Example: "456"
    """
    id: ID!

    """
    Name of the vesting pool.
    Example: "Main Pool"
    """
    name: String!

    """
    Type of unlocking mechanism (DAILY or MONTHLY).
    Example: DAILY
    """
    unlockType: UnlockType!

    """
    Total amount of tokens in the pool.
    Example: 100000
    """
    totalPoolTokens: BigInt!

    """
    Amount of dedicated tokens for the pool users.
    Example: 1000
    """
    dedicatedPoolTokens: BigInt!

    """
    Listing allocation amount in percentage.
    Example: 10
    """
    listingPercentage: BigDecimal!

    """
    Duration of the cliff period in seconds
    Example: 2592000 (30 days in seconds)
    """
    cliffDuration: BigInt!

    """
    Unix timestamp when the cliff period ends.
    Example: 1645000000
    """
    cliffEndDate: BigInt!

    """
    Cliff allocation amount in percentage.
    Example: 20
    """
    cliffPercentage: BigDecimal!

    """
    Duration of the vesting period in seconds
    Example: 7776000 (90 days in seconds)
    """
    vestingDuration: BigInt!

    """
    Unix timestamp when the vesting period ends.
    Example: 1648000000
    """
    vestingEndDate: BigInt!

    """
    Vesting allocation amount in percentage.
    This is the remaining percentage: `100 - listingPercentage - cliffPercentage`
    Example: 70
    """
    vestingPercentage: BigDecimal!

    """
    List of beneficiaries associated with the pool.
    """
    allocations: [VestingPoolAllocation!] @derivedFrom(field: "vestingPool")

    """
    List of band Ids staked from associated pool.
    """
    bands: [Band!]! @derivedFrom(field: "vestingPool")
}

# Entity representing Vesting Pool Allocation
# This entity holds single pool allocation for the beneficiary
type VestingPoolAllocation @entity {
    """
    Id composed of: vestingPool-beneficiary
    Example: "456-0x123abc"
    """
    id: ID!

    """
    Associated Vesting Pool for the beneficiary.
    """
    vestingPool: VestingPool!

    """
    Owner of the tokens allocation.
    """
    beneficiary: Beneficiary!

    """
    Total tokens allocated to the beneficiary.
    Example: 5000
    """
    totalTokens: BigInt!

    """
    Tokens unlocked on the listing date.
    Example: 500
    """
    listingTokens: BigInt!

    """
    Tokens unlocked during the cliff period.
    Example: 1000
    """
    cliffTokens: BigInt!

    """
    Tokens vested to the beneficiary.
    This equals to `totalTokens - listingTokens - cliffTokens`.
    Example: 2500
    """
    vestedTokens: BigInt!

    """
    Tokens staked by the beneficiary.
    Example: 1000
    """
    stakedTokens: BigInt!

    """
    Tokens available for staking, but not staked yet.
    Example: 500
    """
    unstakedTokens: BigInt!

    """
    Tokens claimed by the beneficiary.
    Example: 2000
    """
    claimedTokens: BigInt!

    """
    Tokens that are not claimed yet.
    """
    unclaimedTokens: BigInt!
}

# Entity representing Beneficiary
# It adds data from all pools that the beneficiary is associated with
type Beneficiary @entity {
    """
    Hexadecimal address of the beneficiary.
    Example: "0x123abc"
    """
    id: ID!

    """
    Total tokens allocated to the beneficiary.
    Example: 5000
    """
    totalTokens: BigInt!

    """
    Tokens unlocked on the listing date.
    Example: 500
    """
    totalListingTokens: BigInt!

    """
    Tokens unlocked during the cliff period.
    Example: 1000
    """
    totalCliffTokens: BigInt!

    """
    Tokens vested to the beneficiary.
    This equals to `totalTokens - totalListingTokens - totalCliffTokens`.
    Example: 2500
    """
    totalVestedTokens: BigInt!

    """
    Tokens staked by the beneficiary.
    Example: 1000
    """
    totalStakedTokens: BigInt!

    """
    Tokens available for staking, but not staked yet.
    Example: 500
    """
    totalUnstakedTokens: BigInt!

    """
    Tokens claimed by the beneficiary.
    Example: 2000
    """
    totalClaimedTokens: BigInt!

    """
    Tokens that are not claimed yet.
    Example: 500
    """
    totalUnclaimedTokens: BigInt!

    """
    Total number of allocations associated with the beneficiary.
    """
    totalAllocations: Int!

    """
    List of allocations associated with the beneficiary.
    """
    allocations: [VestingPoolAllocation!] @derivedFrom(field: "beneficiary")
}

############################################################
#                       NFT & NFT Sale
############################################################

# NFT contract details/settings
type NftContract @entity {
    """
    Always equal to 0
    This is a unique identifier for the NFT contract.
    """
    id: ID!

    """
    NFT contract address
    """
    nftContractAddress: Bytes!
}

# NFT details
type Nft @entity {
    """
    ID of the NFT from the smart contract
    """
    id: ID!

    """
    ID of the NFT in the specific level
    """
    idInLevel: BigInt!

    """
    Level of the NFT
    From 1 to 5
    """
    level: BigInt!

    """
    Shows if this NFT is genesis type
    """
    isGenesis: Boolean!

    """
    Shows if the NFT is inactive, active or deactivated
    """
    activityStatus: ActivityStatus

    """
    Date when the NFT will be deactivated
    """
    activityEndTimestamp: BigInt!

    """
    If user has extended duration for the NFT, this field will be set to the new date
    """
    extendedActivityEndTimestamp: BigInt!

    """
    Owner who controls the NFT
    """
    owner: User!
}

# NFT holder info
type User @entity {
    """
    User address which is the ID
    """
    id: ID!

    """
    All NFTs that user owns
    """
    nfts: [Nft!]! @derivedFrom(field: "owner")

    """
    Active NFT that user owns
    If no active NFT, this field will be null
    """
    activeNft: Nft
}

############################################################
#                         Staking
############################################################

type StakingContract @entity {
    """
    Always equal to 0
    """
    id: ID!

    # Contract fields
    """
    Staking contract address
    """
    stakingContractAddress: Bytes!

    """
    USDT token address used for rewards
    """
    usdtToken: Bytes!

    """
    USDC token address used for rewards
    """
    usdcToken: Bytes!

    """
    WOW token address used for buying bands (staking)
    """
    wowToken: Bytes!

    """
    Array of 24 elements representing the amount of shares staker in total will own
    """
    sharesInMonths: [BigInt!]! # Total shares amount in specific month
    """
    Array of 24 elements representing the amount of shares staker will get after month
    """
    sharesChangeInMonths: [BigInt!]! # Additional shares amount which is added after each month
    """
    Next band id which will be used for the next band entity
    """
    nextBandId: BigInt!

    """
    Next distribution id which will be used for the next distribution entity
    """
    nextDistributionId: BigInt!

    """
    Percentage precision for the distribution percentages
    """
    percentagePrecision: Int!

    """
    Share precision used to format shares in FE
    """
    sharePrecision: BigInt!

    """
    Number of total pools
    """
    totalPools: Int!

    """
    Number of total band levels
    """
    totalBandLevels: Int!

    """
    Flag which determines if upgrades and downgrades are allowed
    """
    areUpgradesEnabled: Boolean!

    """
    Flag which determines if currently gelato is distributing rewards
    """
    isDistributionInProgress: Boolean!

    """
    Stakers who are currently staking
    """
    stakers: [Staker!]!

    # Additional fields
    """
    Total amount of WOW staked in contract
    """
    totalStakedAmount: BigInt!

    """
    The last time when shares were synced by gelato or event
    """
    lastSharesSyncDate: BigInt!

    """
    The period duration for mainnet is 1 month converted to seconds
    This is the time user needs to wait for single period to pass
    For FLEXI bands this means the time user needs to wait to get additional shares
    For FIX bands this means the time user needs to wait to reduce the lock duration
    Returned in seconds
    """
    periodDuration: BigInt!
}

type Pool @entity {
    """
    Pool ID from 1 to 9
    """
    id: ID!

    # Contract fields
    """
    Percentage of distribution for this pool (all pools must sum to 100%)
    """
    distributionPercentage: Int!

    # Additional fields
    """
    Total fixed shares in pool from this pool and higher pools
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return total fixed shares from band level 2 and 3
    """
    totalFixedSharesAmount: BigInt! # Total fixed shares in pool from this pool and higher pools
    """
    Total flexi shares in pool from this pool and higher pools
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return total flexi shares from band level 2 and 3
    """
    totalFlexiSharesAmount: BigInt!

    """
    Isolated fixed shares from bands only from this pool (shares from higher pools are not included)
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return isolated fixed shares from band level 2
    """
    isolatedFixedSharesAmount: BigInt!

    """
    Isolated flexi shares from bands only from this pool (shares from higher pools are not included)
    If band level 1, 2 and 3 are staked and pool id is 2,
    this field will return isolated flexi shares from band level 2
    """
    isolatedFlexiSharesAmount: BigInt!
}

type BandLevel @entity {
    """
    Band level from 1 to 9
    """
    id: ID!

    # Contract fields
    """
    Band level price in USD (USDT or USDC)
    """
    price: BigInt!

    """
    Pools that are accessible for this band level
    """
    accessiblePools: [Pool!]!
}

type Staker @entity {
    """
    Staker address
    """
    id: ID!

    # Contract fields
    """
    Fixed bands are bands that are locked for a specific amount of months
    This array is holding all fixed bands that staker has
    """
    fixedBands: [Band!]!

    """
    Flexi bands are bands that are not locked and can be unstaked at any time
    This array is holding all flexi bands that staker has
    """
    flexiBands: [Band!]!

    """
    Total amount of bands purchased by staker (fixed + flexi bands)
    """
    bandsCount: Int!

    """
    Staker rewards for USDT and USDC tokens
    """
    rewards: [StakerRewards!]! @derivedFrom(field: "staker")

    # Additional fields
    """
    Total amount of WOW staked (fixed + flexi bands)
    Amount added from active band prices
    """
    stakedAmount: BigInt! # Amount of WOW staked
    """
    Fixed shares per pool from all band levels (stakes)
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [6000000, 4000000, 4000000, 4000000, 2000000, 2000000, 2000000, 0, 0]
    """
    fixedSharesPerPool: [BigInt!]!

    """
    Flexi shares per pool from all band levels (stakes)
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [3000000, 2000000, 2000000, 2000000, 1000000, 1000000, 1000000, 0, 0]
    """
    flexiSharesPerPool: [BigInt!]!

    """
    Isolated fixed shares per pool from bands only from this band level (stake)
    Shares from other stakers or other band levels are not included
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [2000000, 0, 0, 2000000, 0, 0, 2000000, 0, 0]
    """
    isolatedFixedSharesPerPool: [BigInt!]!

    """
    Isolated flexi shares per pool from bands only from this band level (stake)
    Shares from other stakers or other band levels are not included
    9 numbers for each pool (starting from pool 1 and ending with pool 9)
    Example: [1000000, 0, 0, 1000000, 0, 0, 1000000, 0, 0]
    """
    isolatedFlexiSharesPerPool: [BigInt!]!

    """
    Total unclaimed rewards for USDT and USDC tokens combined (USD)
    """
    totalUnclaimedRewards: BigInt!

    """
    Total claimed rewards for USDT and USDC tokens combined (USD)
    """
    totalClaimedRewards: BigInt!
}

type StakerRewards @entity {
    """
    ID composed of: staker-token
    """
    id: ID!

    # Contract fields
    """
    Staker address who owns the rewards
    """
    staker: Staker!

    """
    Token address
    """
    token: Bytes!

    # Additional fields
    """
    Amount of unclaimed rewards that staker has
    It will become 0 after claiming and will be added to claimedAmount
    """
    unclaimedAmount: BigInt!

    """
    Amount of claimed rewards
    """
    claimedAmount: BigInt!
}

type Band @entity {
    """
    ID incremented by 1 for each new band (like NFT ID)
    """
    id: ID!

    # Contract fields

    """
    The price of the band in WOW tokens. This is the amount of WOW tokens
    that the staker has staked to purchase the band. On downgrade/upgrade
    the purchase price will be recalculated based on the current band level price.
    """
    purchasePrice: BigInt!

    """
    Staker address who owns the band
    """
    owner: Staker!

    """
    Date when the band was purchased
    """
    stakingStartDate: BigInt!

    """
    Band level from 1 to 9
    """
    bandLevel: BandLevel!

    """
    If user has staked with type FLEXI, this field will be set to 0
    If user has staked with type FIX, this field will be set to
    the number of months the band is fixed (locked) for.
    It can be a number from 1 to 24.
    """
    fixedMonths: Int!

    """
    Staking type for the band (FIX or FLEXI)
    """
    stakingType: StakingType!

    """
    Determines if the band is purchased by staking vested WOW tokens from Vesting contract or not
    """
    areTokensVested: Boolean!

    """
    If band is purchased by staking vested WOW tokens from Vesting contract
    this field will be set to pool id in Vesting contract.
    If band is purchased by staking WOW tokens from Staking contract
    this field will not be set and will be null.
    """
    vestingPool: VestingPool

    # Additional fields
    """
    This is the amount of shares band owns in each accessible pool
    For non accessible pools, the band has 0 shares
    """
    sharesAmount: BigInt!
}

type FundsDistribution @entity {
    """
    ID incremented by 1 for each distribution
    """
    id: ID!

    # Contract fields
    """
    Token address
    """
    token: Bytes!

    """
    Amount of tokens to distribute to all stakers
    """
    amount: BigInt!

    """
    Date when the distribution was created by admin
    Returned in unix timestamp
    """
    createdAt: BigInt!

    """
    Date when the distribution was executed by gelato
    Returned in unix timestamp
    """
    distributedAt: BigInt!

    """
    List of stakers who received the distribution
    This array is in string format because this array is going to be used
    as parameter for the SC function call
    """
    stakers: [String!]!

    """
    List of amounts each staker received
    This array needs to be the same length as the stakers array
    and the amounts need to be in the same order as the stakers
    """
    rewards: [BigInt!]!
}
